// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Praxis {
    id        Int    @id @default(autoincrement())
    whatsapp  String @default("61999020080")
    instagram String @default("https://www.instagram.com/praxisconsultoriajr")
    linkedin  String @default("https://br.linkedin.com/company/praxis-consultoria-jr")
    email     String @default("") // Colocar seu email da Struct para realizar testes
}

model Article {
    id          Int      @id @default(autoincrement())
    title       String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    imageSrc    String?
    content     String   @db.Text
    themes      Theme[]
    slug        String   @unique

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([slug])
}

model Theme {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    articles Article[]
}

model Partner {
    id    Int     @id @default(autoincrement())
    image String
    link  String?
}

model Membership {
    id             Int    @id @default(autoincrement())
    name           String
    role           String
    profilePicture String
}

model Portfolio {
    id          Int     @id @default(autoincrement())
    name        String
    description String  @db.Text
    image       String?
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String
    role          String    @default("USER") // "USER" ou "ADMIN"
    accounts      Account[]
    sessions      Session[]
    artigos       Article[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
